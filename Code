classdef Popup_and_HalfLife_022720 < matlab.apps.AppBase

    % Properties that correspond to app components
    properties (Access = public)
        UIFigure                     matlab.ui.Figure
        FolderPathEditFieldLabel     matlab.ui.control.Label
        FolderPathEditField          matlab.ui.control.EditField
        NottheLastCutCheckBox        matlab.ui.control.CheckBox
        EnterButton                  matlab.ui.control.Button
        TOMCheckBox                  matlab.ui.control.CheckBox
        NottheFirstCutCheckBox       matlab.ui.control.CheckBox
        CutIndexEditFieldLabel       matlab.ui.control.Label
        CutIndexEditField            matlab.ui.control.NumericEditField
        NumberofROIsEditFieldLabel   matlab.ui.control.Label
        NumberofROIsEditField        matlab.ui.control.NumericEditField
        NextCutIndexEditFieldLabel   matlab.ui.control.Label
        NextCutIndexEditField        matlab.ui.control.NumericEditField
        FirstCutIndexEditFieldLabel  matlab.ui.control.Label
        FirstCutIndexEditField       matlab.ui.control.NumericEditField
        PlateauRangeAfterPeaksEditFieldLabel  matlab.ui.control.Label
        PlateauRangeAfterPeaksEditField  matlab.ui.control.NumericEditField
        ResultsNormalizationwithTimeStampplusHalfLifeAnalysisLabel  matlab.ui.control.Label
        Label                        matlab.ui.control.Label
    end

    % Callbacks that handle component events
    methods (Access = private)

        % Value changed function: NottheLastCutCheckBox
        function NottheLastCutCheckBoxValueChanged(app, event)
            value = app.NottheLastCutCheckBox.Value;
            
            switch value
                case 0
                    app.NextCutIndexEditField.Visible = 'off';
                    app.NextCutIndexEditFieldLabel.Visible = 'off';
                case 1
                    app.NextCutIndexEditField.Visible = 'on';
                    app.NextCutIndexEditFieldLabel.Visible = 'on';
            end
        end

        % Button pushed function: EnterButton
        function EnterButtonPushed(app, event)

            function fileList = getFiles(dirName)
            dirData = dir(dirName);      %# Get the data for the current directory
            dirIndex = [dirData.isdir];  %# Find the index for directories
            fileList = {dirData(~dirIndex).name}';  %'# Get a list of the files
            end
            done = "done";
                
            notfirstcutval = app.NottheFirstCutCheckBox.Value;
            tomval = app.TOMCheckBox.Value;
            if notfirstcutval == 1
                firstcut_index = app.FirstCutIndexEditField.Value;
            else
                
                firstcut_index = app.CutIndexEditField.Value;
                
                gfpfilepath = app.FolderPathEditField.Value + "\data\Results.csv";
                tomfilepath = app.FolderPathEditField.Value + "\data\ResultsTOM.csv";
                
                data = csvread(gfpfilepath,1,2);
                if tomval == 1
                tomdata = csvread(tomfilepath, 1,2);
                end

                columntot = app.NumberofROIsEditField.Value + 1;
                operatecolumn = app.NumberofROIsEditField.Value;
                photopath = app.FolderPathEditField.Value +"\GFP";
                writeto = app.FolderPathEditField.Value + "\data\ROI";
            
                fileNames = getFiles(photopath);
            
                time = extractBetween(fileNames,"_20","_ms");%extracted time strings from all files
            %convert everything to seconds
                hour_sec = 3600 * str2num((char((extractBetween(time, "_","h")))));
                minute_sec = 60 * str2num((char((extractBetween(time, "h","m")))));
                second = str2num((char((extractBetween(time, "m_","s")))));
                totseconds = hour_sec + minute_sec + second;
            
            %plot(totseconds) to check
            
            %subtract seconds from first
                subtractsecond = totseconds - totseconds(1);

                if tomval == 1
                    GFPoperatedata = data(:,1:operatecolumn);
                    GFPMean = GFPoperatedata - data(:, columntot);
                    TOMoperatedata = tomdata(:,1:operatecolumn);
                    TOMMean = TOMoperatedata - tomdata(:, columntot);
                    Mean = GFPMean ./ TOMMean;
                    row = Mean(firstcut_index,:);
                    Mean = Mean ./ row;
%                     output = array2table(Mean);
                    for i = 1:operatecolumn
                        a = zeros(size(Mean,1),2);
                        a(:,1) = subtractsecond(:,1);
                        a(:,2) = Mean(:,i);
                        meanheader = strcat('Mean',num2str(i));
                        output = array2table(a,'VariableNames',{'Time',meanheader});
                        finalwrite = strcat(writeto,'/Normalize_TOM_Divide ',num2str(firstcut_index), meanheader,".csv");
%                         sheetname = strcat('Normalize Subtract ',app.RowNumberEditField.Value, meanheader);
                        writetable(output,finalwrite);
                    end
                    done
%                     sheetname = strcat('Normalize Divide ',app.RowNumberEditField.Value);
%                     writetable(output,writeto,'Sheet',sheetname)
                else % dividing and normalizing
                    operatedata = data(:,1:operatecolumn);
                    Mean = operatedata - data(:, columntot);
                    row = Mean(firstcut_index,:);
                    Mean = Mean ./ row;
%                     output = array2table(Mean);
                    for i = 1:operatecolumn
                        a = zeros(size(Mean,1),2);
                        a(:,1) = subtractsecond(:,1);
                        a(:,2) = Mean(:,i);
                        meanheader = strcat('Mean',num2str(i));
                        output = array2table(a,'VariableNames',{'Time',meanheader});
                        finalwrite = strcat(writeto,'/Normalize_Divide ',num2str(firstcut_index), meanheader,".csv");
%                         sheetname = strcat('Normalize Subtract ',app.RowNumberEditField.Value, meanheader);
                        writetable(output,finalwrite);
                    end
                    done
%                     sheetname = strcat('Normalize Divide ',app.RowNumberEditField.Value);
%                     writetable(output,writeto,'Sheet',sheetname)
                end
            end
        %Half-Life Analysis Starts
            root1 = app.FolderPathEditField.Value + "\data\";
            root2 = "ROI\";
            root = root1 + root2;
            filetype = '.csv';
            final = zeros(1,2); %creates an empty matrix to be filled later with values
            cutindex = app.CutIndexEditField.Value;
            nextcutval = app.NottheLastCutCheckBox.Value;
            %tomval = app.TOMCheckBox.Value;

            
            for i = 1:app.NumberofROIsEditField.Value
                if tomval == 1
                    filenum =  "Normalize_TOM_Divide" + num2str(firstcut_index) + "Mean" + num2str(i);
                else
                    filenum =  "Normalize_Divide" + num2str(firstcut_index) + "Mean" + num2str(i);
                end
               
                filepath = strcat(root, filenum, filetype); %this creates/puts together the filename
                wholematrix = csvread(filepath, 1, 0); %reads the files
                x = wholematrix(:,1); %creates an array of x values (times)
                y = wholematrix(:,2); %creates an array of y values (intensities)
                
                if nextcutval == 1
                next_cutindex = app.NextCutIndexEditField.Value;
                else
                next_cutindex = numel(x);
                end
                cuttime = x(cutindex);
                next_cuttime = x(next_cutindex);
                cy = y(cutindex:end); 
                cx = x(cutindex:end);

    %FIND PEAK
    %----------------------------------------
                last_image_time = cx(end,:);
                peakrange_time = cuttime + 45;
                if peakrange_time > last_image_time
                    peakrange_time = last_image_time;
                end
                after_peakrange = find(cx>=peakrange_time); %this takes all the indexes of all the intensities in findrange that are less than or equal to the peak value
                peakrange_onsheet = cx(after_peakrange(1)); %after_peakrange(1) is essentially the index of the first value after the peakrange
                peakrange_index = find(x==peakrange_onsheet,1, 'first'); %this takes the actual index of the peakrange
    
                last_image_index = find(x==last_image_time);
                cy_peak_range = y(cutindex:peakrange_index);%creates a new intensity array that only contains possible range of peak.

                peak = max(cy_peak_range); %finds the value of the intensity of the peak
                peakindex = find(cy==peak,1,'first'); %indexes the value so we can locate the corresponding time in "cx" for this peak
    %----------------------------------------
    
    %FIND PLATEAU
    %----------------------------------------
                peaktime = cx(peakindex); %locates the corresponding time to the peak and saves that value
    %NEED A IF STATEMENT HERE
    
                plateaurange_time = peaktime + app.PlateauRangeAfterPeaksEditField.Value;
                if plateaurange_time > next_cuttime
                    plateaurange_onsheet = next_cuttime;
                else
                    after_plateaurange = find(cx>=plateaurange_time); %this takes all the indexes of all the intensities in findrange that are less than or equal to the plateau value
                    plateaurange_onsheet = cx(after_plateaurange(1)); %after_plateaurange(1) is essentially the index of the first value after the plateaurange
                end
                plateaurange_index = find(cx==plateaurange_onsheet); %,1, 'first'this takes the actual index of the plateaurange
                plateau = min(cy(peakindex:plateaurange_index)); %find the mininum between the peak and the following cut as the plateau
    
                plateau_index = find(cy==plateau,1,'first');%find the index location of the plateau
    %mihgt have error here if there is no peak.
                if plateau_index < peakindex %In case there is a image before peak which has extact same intensity as plateau
                    plateau_index = find(cy==plateau,1,'last');%find the index location of the plateau
                end 
    %----------------------------------------

    %FITTING
    %----------------------------------------
    intensity_array = cy(peakindex:plateau_index); %create an intensity array from the peak to the plateau
    time_array = cx(peakindex:plateau_index); %create an time array from the peak to the plateau
    
    plateau_time = cx(plateau_index);
    
    points_num = numel(intensity_array);%number of intensity array elements
    try
        opts = fitoptions( 'Method', 'NonlinearLeastSquares' );
        opts.Display = 'Off';
        %opts.Normalize = 'on';
        
        [f, gof] = fit(intensity_array,time_array,'exp2',opts); %2 phase exponential decay fitting
   
        half_peak = (peak - plateau)/2 + plateau;
        half_life = f(half_peak) - peaktime;

        r2 = gof.rsquare; %Obtain R-square to examine the goodness of fitting.
    catch %Any error goes to NA
        half_life = "NA";
        r2 = "NA";
    end
    %----------------------------------------
    final(i,1) = i; %this serves as a label to identify the time with the csv file
    final(i,2) = peaktime;
    final(i,3) = peak;
    final(i,4) = plateau_time; %saves the subtracted time between the peaks to a location in the matrix
    final(i,5) = plateau;
    final(i,6) = half_life;
    final(i,7) = r2;
    final(i,8) = points_num;
            end
            output = array2table(final,'VariableNames',{'Cell','Peak_Time','Peak_Value','Plateau_Time','Plateau_Value','Half_Life','Rsquare','Num_Points'}); %writes the matrix containing all subtracted times to a single csv file containing all the times

            output_filename = "Half-life for the "+cuttime+"s cut";

            finalwrite = strcat(root1,output_filename,filetype); %will write to the location where all the csv files are

            writetable(output,finalwrite);
        end

        % Value changed function: NottheFirstCutCheckBox
        function NottheFirstCutCheckBoxValueChanged(app, event)
            value = app.NottheFirstCutCheckBox.Value;
            switch value
                case 0
                    app.FirstCutIndexEditField.Visible = 'off';
                    app.FirstCutIndexEditFieldLabel.Visible = 'off';
                case 1
                    app.FirstCutIndexEditField.Visible = 'on';
                    app.FirstCutIndexEditFieldLabel.Visible = 'on';
            end
        end
    end

    % Component initialization
    methods (Access = private)

        % Create UIFigure and components
        function createComponents(app)

            % Create UIFigure and hide until all components are created
            app.UIFigure = uifigure('Visible', 'off');
            app.UIFigure.Position = [100 100 640 402];
            app.UIFigure.Name = 'UI Figure';

            % Create FolderPathEditFieldLabel
            app.FolderPathEditFieldLabel = uilabel(app.UIFigure);
            app.FolderPathEditFieldLabel.HorizontalAlignment = 'right';
            app.FolderPathEditFieldLabel.Position = [37 340 68 22];
            app.FolderPathEditFieldLabel.Text = 'Folder Path';

            % Create FolderPathEditField
            app.FolderPathEditField = uieditfield(app.UIFigure, 'text');
            app.FolderPathEditField.Position = [114 340 495 22];

            % Create NottheLastCutCheckBox
            app.NottheLastCutCheckBox = uicheckbox(app.UIFigure);
            app.NottheLastCutCheckBox.ValueChangedFcn = createCallbackFcn(app, @NottheLastCutCheckBoxValueChanged, true);
            app.NottheLastCutCheckBox.Text = 'Not the Last Cut';
            app.NottheLastCutCheckBox.Position = [336 250 109 22];

            % Create EnterButton
            app.EnterButton = uibutton(app.UIFigure, 'push');
            app.EnterButton.ButtonPushedFcn = createCallbackFcn(app, @EnterButtonPushed, true);
            app.EnterButton.FontSize = 20;
            app.EnterButton.FontWeight = 'bold';
            app.EnterButton.Position = [245 114 156 52];
            app.EnterButton.Text = 'Enter';

            % Create TOMCheckBox
            app.TOMCheckBox = uicheckbox(app.UIFigure);
            app.TOMCheckBox.Text = 'TOM';
            app.TOMCheckBox.Position = [37 292 48 22];

            % Create NottheFirstCutCheckBox
            app.NottheFirstCutCheckBox = uicheckbox(app.UIFigure);
            app.NottheFirstCutCheckBox.ValueChangedFcn = createCallbackFcn(app, @NottheFirstCutCheckBoxValueChanged, true);
            app.NottheFirstCutCheckBox.Text = 'Not the First Cut';
            app.NottheFirstCutCheckBox.Position = [37 250 109 22];

            % Create CutIndexEditFieldLabel
            app.CutIndexEditFieldLabel = uilabel(app.UIFigure);
            app.CutIndexEditFieldLabel.HorizontalAlignment = 'right';
            app.CutIndexEditFieldLabel.Position = [336 292 57 22];
            app.CutIndexEditFieldLabel.Text = 'Cut Index';

            % Create CutIndexEditField
            app.CutIndexEditField = uieditfield(app.UIFigure, 'numeric');
            app.CutIndexEditField.Position = [408 292 50 22];

            % Create NumberofROIsEditFieldLabel
            app.NumberofROIsEditFieldLabel = uilabel(app.UIFigure);
            app.NumberofROIsEditFieldLabel.HorizontalAlignment = 'right';
            app.NumberofROIsEditFieldLabel.Position = [37 192 92 22];
            app.NumberofROIsEditFieldLabel.Text = 'Number of ROIs';

            % Create NumberofROIsEditField
            app.NumberofROIsEditField = uieditfield(app.UIFigure, 'numeric');
            app.NumberofROIsEditField.Position = [144 192 39 22];

            % Create NextCutIndexEditFieldLabel
            app.NextCutIndexEditFieldLabel = uilabel(app.UIFigure);
            app.NextCutIndexEditFieldLabel.HorizontalAlignment = 'right';
            app.NextCutIndexEditFieldLabel.Visible = 'off';
            app.NextCutIndexEditFieldLabel.Position = [466 250 85 22];
            app.NextCutIndexEditFieldLabel.Text = 'Next Cut Index';

            % Create NextCutIndexEditField
            app.NextCutIndexEditField = uieditfield(app.UIFigure, 'numeric');
            app.NextCutIndexEditField.Visible = 'off';
            app.NextCutIndexEditField.Position = [566 250 43 22];

            % Create FirstCutIndexEditFieldLabel
            app.FirstCutIndexEditFieldLabel = uilabel(app.UIFigure);
            app.FirstCutIndexEditFieldLabel.HorizontalAlignment = 'right';
            app.FirstCutIndexEditFieldLabel.Visible = 'off';
            app.FirstCutIndexEditFieldLabel.Position = [173 250 84 22];
            app.FirstCutIndexEditFieldLabel.Text = 'First Cut Index';

            % Create FirstCutIndexEditField
            app.FirstCutIndexEditField = uieditfield(app.UIFigure, 'numeric');
            app.FirstCutIndexEditField.Visible = 'off';
            app.FirstCutIndexEditField.Position = [272 250 29 22];

            % Create PlateauRangeAfterPeaksEditFieldLabel
            app.PlateauRangeAfterPeaksEditFieldLabel = uilabel(app.UIFigure);
            app.PlateauRangeAfterPeaksEditFieldLabel.HorizontalAlignment = 'right';
            app.PlateauRangeAfterPeaksEditFieldLabel.Position = [336 192 162 22];
            app.PlateauRangeAfterPeaksEditFieldLabel.Text = 'Plateau Range After Peak (s)';

            % Create PlateauRangeAfterPeaksEditField
            app.PlateauRangeAfterPeaksEditField = uieditfield(app.UIFigure, 'numeric');
            app.PlateauRangeAfterPeaksEditField.Position = [513 192 54 22];

            % Create ResultsNormalizationwithTimeStampplusHalfLifeAnalysisLabel
            app.ResultsNormalizationwithTimeStampplusHalfLifeAnalysisLabel = uilabel(app.UIFigure);
            app.ResultsNormalizationwithTimeStampplusHalfLifeAnalysisLabel.HorizontalAlignment = 'center';
            app.ResultsNormalizationwithTimeStampplusHalfLifeAnalysisLabel.FontName = 'Arial';
            app.ResultsNormalizationwithTimeStampplusHalfLifeAnalysisLabel.FontSize = 15;
            app.ResultsNormalizationwithTimeStampplusHalfLifeAnalysisLabel.FontWeight = 'bold';
            app.ResultsNormalizationwithTimeStampplusHalfLifeAnalysisLabel.Position = [93 381 459 22];
            app.ResultsNormalizationwithTimeStampplusHalfLifeAnalysisLabel.Text = 'Results Normalization with Time Stamp plus Half-Life Analysis';

            % Create Label
            app.Label = uilabel(app.UIFigure);
            app.Label.Position = [37 33 394 57];
            app.Label.Text = {'1. Folder Path is the upper folder path of the data/GFP/TOM folders.'; '2. Data folder has to be named as "data", as well as ROI folder'; '3. GFP results file has to be named as "Results.csv".'; '4. TOM results file has to be named as "ResultsTOM.csv".'};

            % Show the figure after all components are created
            app.UIFigure.Visible = 'on';
        end
    end

    % App creation and deletion
    methods (Access = public)

        % Construct app
        function app = Popup_and_HalfLife_022720

            % Create UIFigure and components
            createComponents(app)

            % Register the app with App Designer
            registerApp(app, app.UIFigure)

            if nargout == 0
                clear app
            end
        end

        % Code that executes before app deletion
        function delete(app)

            % Delete UIFigure when app is deleted
            delete(app.UIFigure)
        end
    end
end
